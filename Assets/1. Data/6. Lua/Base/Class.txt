local function newstep(ins, cls, ...)
  if cls.base then
    newstep(ins, cls.base, ...)
  end
  if cls.new then
    cls.new(ins, ...)
  end
end

local function new(cls, ...)
  local ins = {}
  setmetatable(ins, cls)
  newstep(ins, cls, ...)
  return ins
end

Object = {}
Object.className = "Object"
Object.__index = Object
Object.__call = new

function class(base, clsname)
  base = base or Object
  local cls = {}
  setmetatable(cls, base)
  cls.className = clsname
  cls.base = base
  cls.__index = cls
  cls.__call = new
  return cls
end

function slot(caller, func)
  return function (...)
    return func(caller, ...)
  end
end

function split(str, split_char)      
  local sub_str_tab = {}
  while true do          
    local pos = string.find(str, split_char) 
    if not pos then              
      table.insert(sub_str_tab,str)
      break
    end  
    local sub_str = string.sub(str, 1, pos - 1)              
    table.insert(sub_str_tab,sub_str)
    str = string.sub(str, pos + 1, string.len(str))
  end      
  return sub_str_tab
end